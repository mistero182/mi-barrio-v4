org: ocuba
app: mi-barrio-v4
service: mi-barrio-v4
frameworkVersion: "2"
useDotenv: true
variablesResolutionMode: 20210326
disabledDeprecations:
  - CLI_OPTIONS_SCHEMA # some Serverless plugins haven't been updated yet and generate warnings

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'sa-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 6
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221 # for upcoming Serverless v3

  apiGateway:
    shouldStartNameWithService: true # for upcoming Serverless v3

  environment:
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}
    
    SERVERLESS_USERPOOL_ID: { Ref: CognitoUserPoolMibarrioapp }
    SERVERLESS_USERPOOL_NAME: ${self:resources.Resources.CognitoUserPoolMibarrioapp.Properties.UserPoolName}
    SERVERLESS_USERPOOLCLIENT_ID: { Ref: CognitoUserPoolClient }

    APP_DIST_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APP_PUBLIC_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APIGATEWAY_URL:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}

plugins:
  - serverless-webpack
  - serverless-plugin-scripts
  - serverless-offline
  - serverless-s3-deploy
  - serverless-dotenv-plugin
  # - serverless-domain-manager
  # - serverless-certificate-creator

functions:
  serve:
    # Any web request regardless of path or method will be handled by a single Lambda function
    handler: handler.serve
    events:
      - http:
          path: /
          method: any
          cors: true
      - http:
          path: /{any+}
          method: any
          cors: true
  auth:
    handler: handler.auth
    events:
      - http:
          path: /auth
          method: post
          cors: true
  testauth:
    handler: ./src/server/testauth.test
    events:
      - http:
          path: /testauth
          method: get
          cors: true

  #Cognito Lambdas Events          
  preSignUp:
    handler: ./src/server/cognito/presignup.Role
    events:
      - cognitoUserPool:
          pool: Mibarrioapp
          trigger: PreSignUp

custom:
  distBucketUrl:
    us-east-1:
      # us-east-1 uses a different URL format than the other regions
      Fn::Join:
        - ""
        - - https://s3.amazonaws.com/
          - Ref: DistBucket
    default:
      # All other regions
      Fn::Join:
        - ""
        - - https://s3-
          - Ref: AWS::Region
          - .amazonaws.com/
          - Ref: DistBucket
  # customDomain:
  #   domainName: api.ocuba.net
  #   basePath: ""
  #   certificateName: "api.ocuba.net"
  #   hostedZoneId: Z06659323K0IGDC7GJ08O
  #   createRoute53Record: true
  # customCertificate:
  #   certificateName: 'api.ocuba.net'
  #   idempotencyToken: 'apiocubanet'
  #   hostedZoneIds: 'Z06659323K0IGDC7GJ08O'
  #   enabled: true
  #   rewriteRecords: false

  scripts:
    hooks:
      # Build the client-side script before packaging backend code
      package:initialize: "npm run build:browser"
      deploy:finalize: "npx sls s3deploy --stage ${self:provider.stage}"

  webpack:
    webpackConfig: "webpack.server.config.js"
    includeFunctions:
      - handler.serve

  assets:
    # Automatically copy distribution folder to S3 stopped working; do it manually (see `scripts.hooks.deploy:finalize`)
    auto: false
    targets:
      - bucket:
          Ref: DistBucket
        acl: public-read
        files:
          - source: dist/
            headers:
              CacheControl: max-age=31104000 # 1 year
            globs:
              - "**/*"

  serverless-offline:
    useChildProcesses: true
    noPrependStageInUrl: true
    httpPort: 3004
    lambdaPort: 3006
    stageVariables:
      foo: "bar"

resources:
  Resources:
    # Customize the API Gateway resource
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        # Enable gzip compression
        MinimumCompressionSize: 1000
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    CognitoUserPoolMibarrioapp: ${file(serverless/cognito.yml):CognitoUserPoolMibarrioapp}
    CognitoUserPoolClient: ${file(serverless/cognito.yml):CognitoUserPoolClient}

    UsersDB: ${file(serverless/dynamodb.yml):UsersDB}

    # S3 Bucket for the distribution bundles
    DistBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
              AllowedOrigins:
                - Fn::Join:
                    - ""
                    - - https://
                      - Ref: ApiGatewayRestApi
                      - .execute-api.
                      - Ref: AWS::Region
                      - .amazonaws.com
                - "https://apo.ocuba.net"
              MaxAge: 3000

  Outputs:
    ApiGatewayRestApi:
      Description: API Gateway Endpoint
      Value:
        Ref: ApiGatewayRestApi
    DistBucket:
      Description: Distribution S3 Bucket
      Value:
        Ref: DistBucket
    UserPoolId:
      Value:
        Ref: CognitoUserPoolMibarrioapp
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
