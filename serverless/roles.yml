DefaultRole:
  Type: AWS::IAM::Role
  Properties:
    # Path: /my/default/path/
    RoleName: mibarrio-defaultRole
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: policyVinereserveDefaultRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - 'Fn::Join':
                  - ':'
                  -
                    - 'arn:aws:logs'
                    - Ref: 'AWS::Region'
                    - Ref: 'AWS::AccountId'
                    - 'log-group:/aws/lambda/*:*:*'
            - Effect: "Allow"
              Action:
                - "s3:PutObject"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - "Ref" : "ServerlessDeploymentBucket"

            - Effect: Allow
              Action:
                - "dynamodb:Attributes"
                - "dynamodb:EnclosingOperation"
                - "dynamodb:LeadingKeys"
                - "dynamodb:ReturnConsumedCapacity"
                - "dynamodb:Select"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":table/"
                    - Ref: 'NegociosDB'

NegociosRole:
  Type: AWS::IAM::Role
  Properties:
    # Path: /my/cust/path/
    RoleName: mibarrio-negociosRole
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: policyForNegociosRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - 'Fn::Join':
                  - ':'
                  -
                    - 'arn:aws:logs'
                    - Ref: 'AWS::Region'
                    - Ref: 'AWS::AccountId'
                    - 'log-group:/aws/lambda/*:*:*'
            - Effect: Allow
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:Scan"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":table/"
                    - Ref: 'NegociosDB'

AuthRole:
  Type: AWS::IAM::Role
  Properties:
    # Path: /my/cust/path/
    RoleName: mibarrio-authRole
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: myPolicyName
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - 'Fn::Join':
                  - ':'
                  -
                    - 'arn:aws:logs'
                    - Ref: 'AWS::Region'
                    - Ref: 'AWS::AccountId'
                    - 'log-group:/aws/lambda/*:*:*'
            - Effect: Allow
              Action:
                - "dynamodb:Attributes"
                - "dynamodb:EnclosingOperation"
                - "dynamodb:FullTableScan"
                - "dynamodb:LeadingKeys"
                - "dynamodb:ReturnConsumedCapacity"
                - "dynamodb:ReturnValues"
                - "dynamodb:Select"
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:UpdateItem"
              Resource:
                - Fn::Join:
                    - ""
                    - - "arn:aws:dynamodb:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - ":table/"
                      - Ref: 'UsersDB'
            - Effect: Allow
              Action:
                - "dynamodb:Attributes"
                - "dynamodb:EnclosingOperation"
                - "dynamodb:FullTableScan"
                - "dynamodb:LeadingKeys"
                - "dynamodb:ReturnConsumedCapacity"
                - "dynamodb:ReturnValues"
                - "dynamodb:Select"
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:DeleteItem"
              Resource:
                - Fn::Join:
                    - ""
                    - - "arn:aws:dynamodb:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - ":table/"
                      - Ref: 'SessionsDB'


                

CognitoTriggerLambdaRole:
  Type: AWS::IAM::Role
  Properties:
    # Path: /my/cust/path/
    RoleName: mibarrio-cognitoTriggerRole
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: policyForcognitoTriggerRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - 'Fn::Join':
                  - ':'
                  -
                    - 'arn:aws:logs'
                    - Ref: 'AWS::Region'
                    - Ref: 'AWS::AccountId'
                    - 'log-group:/aws/lambda/*:*:*'
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":table/"
                    - Ref: 'UsersDB'